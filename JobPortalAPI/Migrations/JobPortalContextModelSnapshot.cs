// <auto-generated />
using System;
using JobPortalAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace db_apis.Migrations
{
    [DbContext(typeof(JobPortalContext))]
    partial class JobPortalContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0");

            modelBuilder.Entity("JobPortalAPI.Models.ActivityLog", b =>
                {
                    b.Property<int>("ActivityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ActivityType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("EntityID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("UserID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ActivityID");

                    b.HasIndex("UserID");

                    b.ToTable("ActivityLogs");
                });

            modelBuilder.Entity("JobPortalAPI.Models.Announcement", b =>
                {
                    b.Property<int>("AnnouncementID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Audience")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CreatorUserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsPinned")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("AnnouncementID");

                    b.HasIndex("CreatorUserId");

                    b.ToTable("Announcements");
                });

            modelBuilder.Entity("JobPortalAPI.Models.Application", b =>
                {
                    b.Property<int>("ApplicationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("AppliedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("CandidateID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CoverLetter")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("InterviewStatus")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("JobID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ResumeUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ApplicationID");

                    b.HasIndex("CandidateID");

                    b.HasIndex("JobID");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("JobPortalAPI.Models.CandidateCertification", b =>
                {
                    b.Property<int>("CandidateCertificationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CandidateID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CertificationID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CredentialUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Expiry")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Obtained")
                        .HasColumnType("TEXT");

                    b.Property<string>("Organization")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("CandidateCertificationID");

                    b.HasIndex("CandidateID");

                    b.ToTable("CandidateCertifications");
                });

            modelBuilder.Entity("JobPortalAPI.Models.CandidateEducation", b =>
                {
                    b.Property<int>("EducationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Branch")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("CandidateID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Degree")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Grade")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("GraduationYear")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Institution")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("EducationID");

                    b.HasIndex("CandidateID");

                    b.ToTable("CandidateEducations");
                });

            modelBuilder.Entity("JobPortalAPI.Models.CandidateExperience", b =>
                {
                    b.Property<int>("ExperienceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CandidateID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsCurrent")
                        .HasColumnType("INTEGER");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Responsibilities")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.HasKey("ExperienceID");

                    b.HasIndex("CandidateID");

                    b.ToTable("CandidateExperiences");
                });

            modelBuilder.Entity("JobPortalAPI.Models.CandidateProfile", b =>
                {
                    b.Property<int>("CandidateID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("College")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Course")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("CurrentSemester")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailNotifications")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("GraduationYear")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("InterviewReminders")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("JobApplicationUpdates")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LinkedInProfile")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("MarketingCommunications")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ResumeURL")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("CandidateID");

                    b.ToTable("CandidateProfiles");
                });

            modelBuilder.Entity("JobPortalAPI.Models.CandidateProject", b =>
                {
                    b.Property<int>("ProjectID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CandidateID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ProjectUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Technologies")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ProjectID");

                    b.HasIndex("CandidateID");

                    b.ToTable("CandidateProjects");
                });

            modelBuilder.Entity("JobPortalAPI.Models.CandidateSkill", b =>
                {
                    b.Property<int>("SkillID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CandidateID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProficiencyLevel")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SkillName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SkillType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("SkillID");

                    b.HasIndex("CandidateID");

                    b.ToTable("CandidateSkills");
                });

            modelBuilder.Entity("JobPortalAPI.Models.Company", b =>
                {
                    b.Property<int>("CompanyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("IndustryID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("CompanyID");

                    b.HasIndex("IndustryID");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("JobPortalAPI.Models.Grievance", b =>
                {
                    b.Property<int>("GreivanceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AttachmentFileName")
                        .HasColumnType("TEXT");

                    b.Property<string>("AttachmentFilePath")
                        .HasColumnType("TEXT");

                    b.Property<long?>("AttachmentFileSize")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("SubmittedBy")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SubmitterUserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("GreivanceID");

                    b.HasIndex("SubmitterUserId");

                    b.ToTable("Grievances");
                });

            modelBuilder.Entity("JobPortalAPI.Models.IndustryLookup", b =>
                {
                    b.Property<int>("IndustryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("IndustryName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("IndustryID");

                    b.ToTable("IndustryLookups");
                });

            modelBuilder.Entity("JobPortalAPI.Models.InterviewStatusLookup", b =>
                {
                    b.Property<int>("InterviewStatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("InterviewStatusName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("InterviewStatusID");

                    b.ToTable("InterviewStatusLookups");
                });

            modelBuilder.Entity("JobPortalAPI.Models.Job", b =>
                {
                    b.Property<int>("JobID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ClosingDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("CompanyID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("EmploymentType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("PostedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("RecruiterID")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("RemoteAllowed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SalaryRange")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Skills")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("JobID");

                    b.HasIndex("CompanyID");

                    b.HasIndex("RecruiterID");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("JobPortalAPI.Models.JobTypeLookup", b =>
                {
                    b.Property<int>("JobTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("JobTypeName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("JobTypeID");

                    b.ToTable("JobTypeLookups");
                });

            modelBuilder.Entity("JobPortalAPI.Models.LocationTypeLookup", b =>
                {
                    b.Property<int>("LocationTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("LocationTypeName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LocationTypeID");

                    b.ToTable("LocationTypeLookups");
                });

            modelBuilder.Entity("JobPortalAPI.Models.Recruiter", b =>
                {
                    b.Property<int>("RecruiterID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("CompanyID")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("RecruiterID");

                    b.HasIndex("CompanyID");

                    b.ToTable("Recruiters");
                });

            modelBuilder.Entity("JobPortalAPI.Models.StatusLookup", b =>
                {
                    b.Property<int>("StatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("StatusID");

                    b.ToTable("StatusLookups");
                });

            modelBuilder.Entity("JobPortalAPI.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("VerificationStatus")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("JobPortalAPI.Models.ActivityLog", b =>
                {
                    b.HasOne("JobPortalAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("JobPortalAPI.Models.Announcement", b =>
                {
                    b.HasOne("JobPortalAPI.Models.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("JobPortalAPI.Models.Application", b =>
                {
                    b.HasOne("JobPortalAPI.Models.CandidateProfile", "Candidate")
                        .WithMany()
                        .HasForeignKey("CandidateID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobPortalAPI.Models.Job", "Job")
                        .WithMany()
                        .HasForeignKey("JobID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Candidate");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("JobPortalAPI.Models.CandidateCertification", b =>
                {
                    b.HasOne("JobPortalAPI.Models.CandidateProfile", "Candidate")
                        .WithMany()
                        .HasForeignKey("CandidateID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Candidate");
                });

            modelBuilder.Entity("JobPortalAPI.Models.CandidateEducation", b =>
                {
                    b.HasOne("JobPortalAPI.Models.CandidateProfile", "Candidate")
                        .WithMany()
                        .HasForeignKey("CandidateID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Candidate");
                });

            modelBuilder.Entity("JobPortalAPI.Models.CandidateExperience", b =>
                {
                    b.HasOne("JobPortalAPI.Models.CandidateProfile", "Candidate")
                        .WithMany()
                        .HasForeignKey("CandidateID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Candidate");
                });

            modelBuilder.Entity("JobPortalAPI.Models.CandidateProject", b =>
                {
                    b.HasOne("JobPortalAPI.Models.CandidateProfile", "Candidate")
                        .WithMany()
                        .HasForeignKey("CandidateID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Candidate");
                });

            modelBuilder.Entity("JobPortalAPI.Models.CandidateSkill", b =>
                {
                    b.HasOne("JobPortalAPI.Models.CandidateProfile", "Candidate")
                        .WithMany()
                        .HasForeignKey("CandidateID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Candidate");
                });

            modelBuilder.Entity("JobPortalAPI.Models.Company", b =>
                {
                    b.HasOne("JobPortalAPI.Models.IndustryLookup", "Industry")
                        .WithMany()
                        .HasForeignKey("IndustryID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Industry");
                });

            modelBuilder.Entity("JobPortalAPI.Models.Grievance", b =>
                {
                    b.HasOne("JobPortalAPI.Models.User", "Submitter")
                        .WithMany()
                        .HasForeignKey("SubmitterUserId");

                    b.Navigation("Submitter");
                });

            modelBuilder.Entity("JobPortalAPI.Models.Job", b =>
                {
                    b.HasOne("JobPortalAPI.Models.Company", "Company")
                        .WithMany("Jobs")
                        .HasForeignKey("CompanyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobPortalAPI.Models.Recruiter", "Recruiter")
                        .WithMany("Jobs")
                        .HasForeignKey("RecruiterID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Recruiter");
                });

            modelBuilder.Entity("JobPortalAPI.Models.Recruiter", b =>
                {
                    b.HasOne("JobPortalAPI.Models.Company", "Company")
                        .WithMany("Recruiters")
                        .HasForeignKey("CompanyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("JobPortalAPI.Models.Company", b =>
                {
                    b.Navigation("Jobs");

                    b.Navigation("Recruiters");
                });

            modelBuilder.Entity("JobPortalAPI.Models.Recruiter", b =>
                {
                    b.Navigation("Jobs");
                });
#pragma warning restore 612, 618
        }
    }
}
